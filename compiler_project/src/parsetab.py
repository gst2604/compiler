
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOLEAN CHAR CHAR_LITERAL COMMA DIVIDE ELSE EQ FALSE FALSE FLOAT FLOAT_NUM GE GT ID IF INT LBRACE LBRACKET LE LPAREN LT MINUS NE NUMBER OR PLUS RBRACE RBRACKET RETURN RPAREN SEMICOLON TIMES TRUE TRUE VOID WHILEprogram : declaration_listdeclaration_list : declaration_list declaration\n                          | declarationdeclaration : var_declaration\n                      | fun_declarationvar_declaration : type_specifier ID SEMICOLON\n                         | type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLONtype_specifier : INT\n                        | FLOAT\n                        | VOID\n                        | CHAR\n                        | BOOLEANvar_declaration : type_specifier ID errorfun_declaration : type_specifier ID LPAREN params RPAREN compound_stmtparams : param_list\n                 | VOIDparam_list : param_list COMMA param\n                     | paramparam : type_specifier ID\n                | type_specifier ID LBRACKET RBRACKETcompound_stmt : LBRACE local_declarations statement_list RBRACElocal_declarations : local_declarations var_declaration\n                            | emptystatement_list : statement_list statement\n                        | emptystatement : expression_stmt\n                    | compound_stmt\n                    | selection_stmt\n                    | iteration_stmt\n                    | return_stmtexpression_stmt : expression SEMICOLON\n                         | SEMICOLONexpression_stmt : expression errorselection_stmt : IF LPAREN expression RPAREN statement\n                        | IF LPAREN expression RPAREN statement ELSE statementiteration_stmt : WHILE LPAREN expression RPAREN statementreturn_stmt : RETURN SEMICOLON\n                      | RETURN expression SEMICOLONreturn_stmt : RETURN expression errorexpression : var ASSIGN expression\n                     | logical_expressionvar : ID\n              | ID LBRACKET expression RBRACKETlogical_expression : logical_expression OR and_expression\n                            | and_expressionand_expression : and_expression AND simple_expression\n                        | simple_expressionsimple_expression : additive_expression relop additive_expression\n                           | additive_expressionrelop : LE\n                | LT\n                | GT\n                | GE\n                | EQ\n                | NEadditive_expression : additive_expression addop term\n                             | termaddop : PLUS\n                | MINUSterm : term mulop factor\n                | factormulop : TIMES\n                | DIVIDEfactor : LPAREN expression RPAREN\n                 | var\n                 | call\n                 | NUMBER\n                 | FLOAT_NUM\n                 | CHAR_LITERAL\n                 | TRUE\n                 | FALSEcall : ID LPAREN args RPARENargs : arg_list\n               | emptyarg_list : arg_list COMMA expression\n                   | expressionempty :'
    
_lr_action_items = {'INT':([0,2,3,4,5,12,14,16,17,27,28,30,31,34,35,37,40,],[7,7,-3,-4,-5,-2,-6,-13,7,7,-7,-14,-77,7,-23,-22,-21,]),'FLOAT':([0,2,3,4,5,12,14,16,17,27,28,30,31,34,35,37,40,],[8,8,-3,-4,-5,-2,-6,-13,8,8,-7,-14,-77,8,-23,-22,-21,]),'VOID':([0,2,3,4,5,12,14,16,17,27,28,30,31,34,35,37,40,],[9,9,-3,-4,-5,-2,-6,-13,22,9,-7,-14,-77,9,-23,-22,-21,]),'CHAR':([0,2,3,4,5,12,14,16,17,27,28,30,31,34,35,37,40,],[10,10,-3,-4,-5,-2,-6,-13,10,10,-7,-14,-77,10,-23,-22,-21,]),'BOOLEAN':([0,2,3,4,5,12,14,16,17,27,28,30,31,34,35,37,40,],[11,11,-3,-4,-5,-2,-6,-13,11,11,-7,-14,-77,11,-23,-22,-21,]),'$end':([1,2,3,4,5,12,14,16,28,30,40,],[0,-1,-3,-4,-5,-2,-6,-13,-7,-14,-21,]),'ID':([6,7,8,9,10,11,14,16,19,22,28,31,34,35,36,37,38,39,40,41,42,43,44,45,46,48,50,52,68,69,70,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,96,97,110,111,114,115,116,118,119,],[13,-8,-9,-10,-11,-12,-6,-13,25,-10,-7,-77,-77,-23,55,-22,-25,67,-21,-24,-26,-27,-28,-29,-30,-32,55,55,-31,-33,55,55,-37,55,55,55,55,55,55,55,-50,-51,-52,-53,-54,-55,-58,-59,55,-62,-63,-38,-39,55,55,55,-34,-36,55,-35,]),'SEMICOLON':([13,14,16,24,28,31,34,35,36,37,38,40,41,42,43,44,45,46,47,48,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,74,94,96,97,98,99,100,106,107,108,109,110,111,112,113,115,116,118,119,],[14,-6,-13,28,-7,-77,-77,-23,48,-22,-25,-21,-24,-26,-27,-28,-29,-30,68,-32,73,-65,-41,-42,-45,-47,-49,-57,-61,-66,-67,-68,-69,-70,-71,14,-31,-33,-37,96,-64,-38,-39,-40,-44,-65,-46,-48,-56,-60,48,48,-43,-72,-34,-36,48,-35,]),'LBRACKET':([13,25,55,67,],[15,29,77,15,]),'error}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'declaration':([0,2,],[3,12,]),'var_declaration':([0,2,34,],[4,4,37,]),'fun_declaration':([0,2,],[5,5,]),'type_specifier':([0,2,17,27,34,],[6,6,19,19,39,]),'params':([17,],[20,]),'param_list':([17,],[21,]),'param':([17,27,],[23,32,]),'compound_stmt':([26,36,110,111,118,],[30,43,43,43,43,]),'local_declarations':([31,],[34,]),'empty':([31,34,78,],[35,38,104,]),'statement_list':([34,],[36,]),'statement':([36,110,111,118,],[41,115,116,119,]),'expression_stmt':([36,110,111,118,],[42,42,42,42,]),'selection_stmt':([36,110,111,118,],[44,44,44,44,]),'iteration_stmt':([36,110,111,118,],[45,45,45,45,]),'return_stmt':([36,110,111,118,],[46,46,46,46,]),'expression':([36,50,52,70,72,75,77,78,110,111,114,118,],[47,71,74,93,95,98,101,105,47,47,117,47,]),'var':([36,50,52,70,72,75,76,77,78,79,80,81,90,110,111,114,118,],[53,53,53,53,53,53,100,53,53,100,100,100,100,53,53,53,53,]),'logical_expression':([36,50,52,70,72,75,77,78,110,111,114,118,],[54,54,54,54,54,54,54,54,54,54,54,54,]),'and_expression':([36,50,52,70,72,75,76,77,78,110,111,114,118,],[56,56,56,56,56,56,99,56,56,56,56,56,56,]),'simple_expression':([36,50,52,70,72,75,76,77,78,79,110,111,114,118,],[57,57,57,57,57,57,57,57,57,106,57,57,57,57,]),'additive_expression':([36,50,52,70,72,75,76,77,78,79,80,110,111,114,118,],[58,58,58,58,58,58,58,58,58,58,107,58,58,58,58,]),'term':([36,50,52,70,72,75,76,77,78,79,80,81,110,111,114,118,],[59,59,59,59,59,59,59,59,59,59,59,108,59,59,59,59,]),'factor':([36,50,52,70,72,75,76,77,78,79,80,81,90,110,111,114,118,],[60,60,60,60,60,60,60,60,60,60,60,60,109,60,60,60,60,]),'call':([36,50,52,70,72,75,76,77,78,79,80,81,90,110,111,114,118,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'relop':([58,],[80,]),'addop':([58,107,],[81,81,]),'mulop':([59,108,],[90,90,]),'args':([78,],[102,]),'arg_list':([78,],[103,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','parser.py',22),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',27),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',28),
  ('declaration -> var_declaration','declaration',1,'p_declaration','parser.py',35),
  ('declaration -> fun_declaration','declaration',1,'p_declaration','parser.py',36),
  ('var_declaration -> type_specifier ID SEMICOLON','var_declaration',3,'p_var_declaration','parser.py',41),
  ('var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON','var_declaration',6,'p_var_declaration','parser.py',42),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',56),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','parser.py',57),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','parser.py',58),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser.py',59),
  ('type_specifier -> BOOLEAN','type_specifier',1,'p_type_specifier','parser.py',60),
  ('var_declaration -> type_specifier ID error','var_declaration',3,'p_var_declaration_error','parser.py',65),
  ('fun_declaration -> type_specifier ID LPAREN params RPAREN compound_stmt','fun_declaration',6,'p_fun_declaration','parser.py',71),
  ('params -> param_list','params',1,'p_params','parser.py',79),
  ('params -> VOID','params',1,'p_params','parser.py',80),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','parser.py',84),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',85),
  ('param -> type_specifier ID','param',2,'p_param','parser.py',92),
  ('param -> type_specifier ID LBRACKET RBRACKET','param',4,'p_param','parser.py',93),
  ('compound_stmt -> LBRACE local_declarations statement_list RBRACE','compound_stmt',4,'p_compound_stmt','parser.py',101),
  ('local_declarations -> local_declarations var_declaration','local_declarations',2,'p_local_declarations','parser.py',107),
  ('local_declarations -> empty','local_declarations',1,'p_local_declarations','parser.py',108),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',118),
  ('statement_list -> empty','statement_list',1,'p_statement_list','parser.py',119),
  ('statement -> expression_stmt','statement',1,'p_statement','parser.py',129),
  ('statement -> compound_stmt','statement',1,'p_statement','parser.py',130),
  ('statement -> selection_stmt','statement',1,'p_statement','parser.py',131),
  ('statement -> iteration_stmt','statement',1,'p_statement','parser.py',132),
  ('statement -> return_stmt','statement',1,'p_statement','parser.py',133),
  ('expression_stmt -> expression SEMICOLON','expression_stmt',2,'p_expression_stmt','parser.py',137),
  ('expression_stmt -> SEMICOLON','expression_stmt',1,'p_expression_stmt','parser.py',138),
  ('expression_stmt -> expression error','expression_stmt',2,'p_expression_stmt_error','parser.py',146),
  ('selection_stmt -> IF LPAREN expression RPAREN statement','selection_stmt',5,'p_selection_stmt','parser.py',151),
  ('selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement','selection_stmt',7,'p_selection_stmt','parser.py',152),
  ('iteration_stmt -> WHILE LPAREN expression RPAREN statement','iteration_stmt',5,'p_iteration_stmt','parser.py',159),
  ('return_stmt -> RETURN SEMICOLON','return_stmt',2,'p_return_stmt','parser.py',163),
  ('return_stmt -> RETURN expression SEMICOLON','return_stmt',3,'p_return_stmt','parser.py',164),
  ('return_stmt -> RETURN expression error','return_stmt',3,'p_return_stmt_error','parser.py',172),
  ('expression -> var ASSIGN expression','expression',3,'p_expression','parser.py',178),
  ('expression -> logical_expression','expression',1,'p_expression','parser.py',179),
  ('var -> ID','var',1,'p_var','parser.py',186),
  ('var -> ID LBRACKET expression RBRACKET','var',4,'p_var','parser.py',187),
  ('logical_expression -> logical_expression OR and_expression','logical_expression',3,'p_logical_expression','parser.py',194),
  ('logical_expression -> and_expression','logical_expression',1,'p_logical_expression','parser.py',195),
  ('and_expression -> and_expression AND simple_expression','and_expression',3,'p_and_expression','parser.py',202),
  ('and_expression -> simple_expression','and_expression',1,'p_and_expression','parser.py',203),
  ('simple_expression -> additive_expression relop additive_expression','simple_expression',3,'p_simple_expression','parser.py',210),
  ('simple_expression -> additive_expression','simple_expression',1,'p_simple_expression','parser.py',211),
  ('relop -> LE','relop',1,'p_relop','parser.py',218),
  ('relop -> LT','relop',1,'p_relop','parser.py',219),
  ('relop -> GT','relop',1,'p_relop','parser.py',220),
  ('relop -> GE','relop',1,'p_relop','parser.py',221),
  ('relop -> EQ','relop',1,'p_relop','parser.py',222),
  ('relop -> NE','relop',1,'p_relop','parser.py',223),
  ('additive_expression -> additive_expression addop term','additive_expression',3,'p_additive_expression','parser.py',227),
  ('additive_expression -> term','additive_expression',1,'p_additive_expression','parser.py',228),
  ('addop -> PLUS','addop',1,'p_addop','parser.py',235),
  ('addop -> MINUS','addop',1,'p_addop','parser.py',236),
  ('term -> term mulop factor','term',3,'p_term','parser.py',240),
  ('term -> factor','term',1,'p_term','parser.py',241),
  ('mulop -> TIMES','mulop',1,'p_mulop','parser.py',248),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','parser.py',249),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',253),
  ('factor -> var','factor',1,'p_factor','parser.py',254),
  ('factor -> call','factor',1,'p_factor','parser.py',255),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',256),
  ('factor -> FLOAT_NUM','factor',1,'p_factor','parser.py',257),
  ('factor -> CHAR_LITERAL','factor',1,'p_factor','parser.py',258),
  ('factor -> TRUE','factor',1,'p_factor','parser.py',259),
  ('factor -> FALSE','factor',1,'p_factor','parser.py',260),
  ('call -> ID LPAREN args RPAREN','call',4,'p_call','parser.py',274),
  ('args -> arg_list','args',1,'p_args','parser.py',278),
  ('args -> empty','args',1,'p_args','parser.py',279),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','parser.py',283),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',284),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',291),
]
